package com.example.jogadoresapi.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Jogador {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String posicao;
    private Integer idade;
    private String clube;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getNome() { return nome; }
    public void setNome(String nome) { this.nome = nome; }
    public String getPosicao() { return posicao; }
    public void setPosicao(String posicao) { this.posicao = posicao; }
    public Integer getIdade() { return idade; }
    public void setIdade(Integer idade) { this.idade = idade; }
    public String getClube() { return clube; }
    public void setClube(String clube) { this.clube = clube; }
}

package com.example.jogadoresapi.repository;

import com.example.jogadoresapi.model.Jogador;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface JogadorRepository extends JpaRepository<Jogador, Long> {
    List<Jogador> findByNomeContainingIgnoreCase(String nome);
}
java
Copiar código
package com.example.jogadoresapi.controller;

import com.example.jogadoresapi.model.Jogador;
import com.example.jogadoresapi.repository.JogadorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/jogadores")
public class JogadorController {

    @Autowired
    private JogadorRepository repository;

    @GetMapping
    public List<Jogador> getAll(@RequestParam(required = false) String nome) {
        if (nome != null) return repository.findByNomeContainingIgnoreCase(nome);
        return repository.findAll();
    }

    @GetMapping("/{id}")
    public Jogador getById(@PathVariable Long id) {
        return repository.findById(id).orElse(null);
    }

    @PostMapping
    public Jogador create(@RequestBody Jogador jogador) {
        return repository.save(jogador);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        repository.deleteById(id);
    }
}


package com.example.biblioteca.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
public class Autor {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String nacionalidade;

    @OneToMany(mappedBy = "autor", cascade = CascadeType.ALL)
    private List<Livro> livros;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getNome() { return nome; }
    public void setNome(String nome) { this.nome = nome; }
    public String getNacionalidade() { return nacionalidade; }
    public void setNacionalidade(String nacionalidade) { this.nacionalidade = nacionalidade; }
    public List<Livro> getLivros() { return livros; }
    public void setLivros(List<Livro> livros) { this.livros = livros; }
}

package com.example.biblioteca.model;

import jakarta.persistence.*;

@Entity
public class Livro {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String titulo;
    private Integer ano;

    @ManyToOne
    @JoinColumn(name = "autor_id")
    private Autor autor;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getTitulo() { return titulo; }
    public void setTitulo(String titulo) { this.titulo = titulo; }
    public Integer getAno() { return ano; }
    public void setAno(Integer ano) { this.ano = ano; }
    public Autor getAutor() { return autor; }
    public void setAutor(Autor autor) { this.autor = autor; }
}

package com.example.biblioteca.repository;

import com.example.biblioteca.model.Autor;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AutorRepository extends JpaRepository<Autor, Long> { }

package com.example.biblioteca.repository;

import com.example.biblioteca.model.Livro;
import org.springframework.data.jpa.repository.JpaRepository;

public interface LivroRepository extends JpaRepository<Livro, Long> { }
java
Copiar código
package com.example.biblioteca.controller;

import com.example.biblioteca.model.Autor;
import com.example.biblioteca.repository.AutorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/autores")
public class AutorController {

    @Autowired
    private AutorRepository repository;

    @GetMapping
    public List<Autor> getAll() { return repository.findAll(); }

    @GetMapping("/{id}")
    public Autor getById(@PathVariable Long id) { return repository.findById(id).orElse(null); }

    @PostMapping
    public Autor create(@RequestBody Autor autor) { return repository.save(autor); }

    @PatchMapping("/{id}")
    public Autor update(@PathVariable Long id, @RequestBody Autor autor) {
        Autor existente = repository.findById(id).orElse(null);
        if (existente == null) return null;
        existente.setNome(autor.getNome());
        existente.setNacionalidade(autor.getNacionalidade());
        return repository.save(existente);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { repository.deleteById(id); }
}
java
Copiar código
package com.example.biblioteca.controller;

import com.example.biblioteca.model.Livro;
import com.example.biblioteca.repository.LivroRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/livros")
public class LivroController {

    @Autowired
    private LivroRepository repository;

    @GetMapping
    public List<Livro> getAll() { return repository.findAll(); }

    @GetMapping("/{id}")
    public Livro getById(@PathVariable Long id) { return repository.findById(id).orElse(null); }

    @PostMapping
    public Livro create(@RequestBody Livro livro) { return repository.save(livro); }

    @PatchMapping("/{id}")
    public Livro update(@PathVariable Long id, @RequestBody Livro livro) {
        Livro existente = repository.findById(id).orElse(null);
        if (existente == null) return null;
        existente.setTitulo(livro.getTitulo());
        existente.setAno(livro.getAno());
        existente.setAutor(livro.getAutor());
        return repository.save(existente);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { repository.deleteById(id); }
}
